---
- name: Configure td-agent-bit
  block:
    - name: Ensure Conf Dir Exists
      become: true
      file:
        path: "{{ flb_conf_dir }}"
        state: directory
        mode: 0644
    - name: Create Custom Includes Dir
      become: true
      file:
        path: "{{ flb_includes_dir }}"
        state: directory
        mode: 0644
    - name: Create Custom Parsers Dir
      become: true
      file:
        path: "{{ flb_parsers_dir }}"
        state: directory
        mode: 0644
    - name: Create Custom Filters Dir
      become: true
      file:
        path: "{{ flb_filters_dir }}"
        state: directory
        mode: 0644
    - name: Ensure Buffer Dir Exists
      become: true
      file:
        path: "{{ tail_input.state_db }}"
        state: directory
        mode: 0644
    - name: Template out Custom td-agent-bit Includes
      template:
        src: '{{ item }}'
        dest: '{{ flb_includes_dir }}/{{ (item | basename).split(".j2")[0] }}'
        mode: 0644
      with_items: '{{ flb_includes }}'
      when:
        - flb_includes is defined
        - flb_includes | length >0
      notify: Restart td-agent-bit
    - name: Template out Custom td-agent-bit Parsers
      template:
        src: '{{ item }}'
        dest: '{{ flb_parsers_dir }}/{{ (item | basename).split(".j2")[0] }}'
        mode: 0644
      with_items: '{{ flb_custom_parsers }}'
      when:
        - flb_custom_parsers is defined
        - flb_custom_parsers | length >0
      notify: Restart td-agent-bit
    - name: Template out Custom td-agent-bit lua filter sources
      template:
        src: '{{ item.key }}'
        dest: '{{ flb_filters_dir }}/{{ (item.key | basename).split(".j2")[0] }}'
        mode: 0644
      with_dict: '{{ flb_lua_filters }}'
      when:
        - flb_lua_filters is defined
        - flb_lua_filters | length >0
      notify: Restart td-agent-bit

    - name: Create Filter Prioritization Template
      set_fact:
        flb_filters_yaml: "{{ [] | to_yaml }}"

    - name: Prioritize Filters
      set_fact:
        flb_filters_yaml: "{% if item.filter_priority | default(false) %}{{((flb_filters_yaml | from_yaml) + [item] )| to_yaml}}{% else %}{{(( flb_filters_yaml | from_yaml ) + [( item | combine( {'filter_priority': 100 } ) )] )|to_yaml}}{% endif %}"
      with_items: "{{ flb_filters }}"
      when: flb_filters is defined
 
    - name: Sort Filters
      set_fact:
        flb_filters: "{{flb_filters_yaml | from_yaml | sort(attribute='filter_priority')}}"
      when: flb_filters is defined

    - name: Template Out td-agent-bit.conf
      become: true
      template:
        owner: root
        group: root
        mode: 0644
        src: td-agent-bit.conf.j2
        dest: "{{ flb_conf_dir }}/{{ flb_conf_file }}"
      notify: Restart td-agent-bit
- name: Check for logrotate Duplicates
  become: true
  shell:
    cmd: >-
      set -o pipefail;
      for file in $( ls -d {{ flb_logrotate_conf_dir | quote }}* | grep -v "{{ flb_logrotate_prefix | quote }}");
      do cat $file | grep -v '^#' | tr '\n' " " | sed 's;\([^{]*\){.*;\1;' | sed 's;  [ ]*; ;gm' |
      tr " " "\n" | tr -d \" | grep "/"; done
    executable: /bin/bash
  register: logrotate_watched_files
  changed_when: logrotate_watched_files.rc == 0
- name: Warn about duplicate logrotates
  when:
    - flb_inputs.files is defined and flb_inputs.files | length > 0
    - item.rotate_enabled | default(tail_input.rotate_enabled)
    - item.path in ( logrotate_watched_files.stdout_lines | list )
    - ( not ( item.rotate_allow_duplicates | default(tail_input.rotate_allow_duplicates )))
  fail:
    msg: >-
      Role detected that file input for \"{{ item.path }}\" is already being rotated by
      another logrotate script. Automatic logrotate will not be configured for this input!
  with_items: '{{ flb_inputs.files }}'
  ignore_errors: yes
- name: Configure logrotate
  when:
    - flb_inputs.files is defined and flb_inputs.files | length > 0
    - item.rotate_enabled | default(tail_input.rotate_enabled)
    - ( item.rotate_allow_duplicates | default(tail_input.rotate_allow_duplicates) ) or item.path not in ( logrotate_watched_files.stdout_lines | list )
  become: true
  template:
    src: logrotate.d.j2
    dest: "{{ flb_logrotate_conf_dir }}/{{ flb_logrotate_prefix }}{{ (item.path | basename | splitext)[0] | replace('*', '_all_') }}"
  with_items: "{{ flb_inputs.files }}"